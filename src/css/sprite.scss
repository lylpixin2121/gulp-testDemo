/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$f-big-name: 'fBig';
$f-big-x: 0px;
$f-big-y: 0px;
$f-big-offset-x: 0px;
$f-big-offset-y: 0px;
$f-big-width: 24px;
$f-big-height: 24px;
$f-big-total-width: 71px;
$f-big-total-height: 43px;
$f-big-image: './images/sprite.png';
$f-big: (0px, 0px, 0px, 0px, 24px, 24px, 71px, 43px, './images/sprite.png', 'fBig', );
$lb-name: 'lb';
$lb-x: 52px;
$lb-y: 0px;
$lb-offset-x: -52px;
$lb-offset-y: 0px;
$lb-width: 19px;
$lb-height: 15px;
$lb-total-width: 71px;
$lb-total-height: 43px;
$lb-image: './images/sprite.png';
$lb: (52px, 0px, -52px, 0px, 19px, 15px, 71px, 43px, './images/sprite.png', 'lb', );
$search-name: 'search';
$search-x: 0px;
$search-y: 26px;
$search-offset-x: 0px;
$search-offset-y: -26px;
$search-width: 17px;
$search-height: 17px;
$search-total-width: 71px;
$search-total-height: 43px;
$search-image: './images/sprite.png';
$search: (0px, 26px, 0px, -26px, 17px, 17px, 71px, 43px, './images/sprite.png', 'search', );
$search-hover-name: 'searchHover';
$search-hover-x: 19px;
$search-hover-y: 26px;
$search-hover-offset-x: -19px;
$search-hover-offset-y: -26px;
$search-hover-width: 17px;
$search-hover-height: 17px;
$search-hover-total-width: 71px;
$search-hover-total-height: 43px;
$search-hover-image: './images/sprite.png';
$search-hover: (19px, 26px, -19px, -26px, 17px, 17px, 71px, 43px, './images/sprite.png', 'searchHover', );
$video-name: 'video';
$video-x: 26px;
$video-y: 0px;
$video-offset-x: -26px;
$video-offset-y: 0px;
$video-width: 24px;
$video-height: 19px;
$video-total-width: 71px;
$video-total-height: 43px;
$video-image: './images/sprite.png';
$video: (26px, 0px, -26px, 0px, 24px, 19px, 71px, 43px, './images/sprite.png', 'video', );
$spritesheet-width: 71px;
$spritesheet-height: 43px;
$spritesheet-image: './images/sprite.png';
$spritesheet-sprites: ($f-big, $lb, $search, $search-hover, $video, );
$spritesheet: (71px, 43px, './images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
